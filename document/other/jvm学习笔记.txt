1. 讲解jstat -gcutil的
命令: jstat -gcutil $(pgrep java|head -1) 1s
      jstat -gc 进程号 5s
参考文章:http://www.mamicode.com/info-detail-1839781.html
         http://blog.csdn.net/zlzlei/article/details/46471627

2. jvm调优常用配置
   参考文章: http://www.importnew.com/19264.html

3. 常用命令
 jstack -l PID >> temp.txt 把java线程信息导出到文件.

4. jvm 默认有两种运行模式, server端, 或者client端

5. jps -l 查看jvm中的进程信息

6. jinfo -flag UseG1GC(参数名) 32(pid)  查看jvm某个参数配置的值

7. jvm常用参数
   -Xms:初始堆大小
   -Xmx:最大堆大小
   -XX:NewSize=n  设置年轻代大小

8. jvm结构划分
jvm可以分成三大主要部分: 类加载子系统, 运行时数据区, 执行引擎
运行时数据区: 堆, 栈, 本地方法区, 方法区, 程序计数器
栈: 栈由栈桢构成, 每个线程都会有一个单独的栈, 这个线程在运行过程中, 执行不同的方法,每个方法都会有自己的内存(栈桢), 栈桢中
    保存了这个方法的局部变量.
    栈的特性是先进后出.
栈桢: 包括了,局部变量表, 操作数栈, 动态链接, 方法出口(当前方法执行完成后跳到哪个地方)

动态链接: 一个对象在调用其方法的时候, 动态找到类元信息, 对应方法的入口(运行的过程生成的, 所以叫动态)

程序计数器: 记录了程序运行的命令行号

方法区(永久代): 常量, 静态变量, 类的元信息. 方法区用的内存大小不计入分配的jvm内存大小

本地方法区: java调用到某些native本地方法时, 会调用c语言的实现方法,这些方法也会有变量等需要占用内存,就放在这里了.(每个线程独享)


9. 了解class文件
可以通过javap -c **.class 可以以更可读的方式查看class文件 (参考Temp.txt文件)
javap -v **.class 生成的更加详细一点.

对象头: 一个new出来的对象, 在对象头中保存了该对象类型的元信息的链接. 对象年龄, 对象锁信息等


10. 可达性分析算法
GC Roots根节点: 类加载器, Thread, 虚拟机栈的本地变量表, static成员, 常量引用, 本地方法栈, 静态方法等等

11. 多核CPU多级缓存. java线程内存模型跟cpu缓存模型类似, 是基于cpu缓存模型来建立的, java线程内存模型是标准化的,
    屏蔽掉了底层不同计算机的区别.

12. volatile
    线程内存与主内存同步
    线程1 read 从主内存读共享变量的值
    线程1 load 把值加载到线程工作内存中
    线程2 read 从主内存读共享变量的值
    线程2 load 把值加载到线程工作内存中
    线程2 use 从工作内存中读取值参与运算
    线程2 assign 将计算好的值重新赋值给工作内存

    store 将工作内存中的值写入主内丰
    write 把前面一步store的值赋值给主内存的变量.(store + write 才完成写)
    lock 将主内存加锁, 标记为线程独占状态
    unlock 解锁, 解锁后其它线程可以锁定该变量

    volatile保证了在store前加锁, write后解锁

    happen before 原则, 防止指令重排

    总线: cpu传输数据的通道. 早期实现可见性,是在总线加锁的形式实现线程间可见性. 但是性能很低.因为一个线程修改某个变量过程中,
          其它线程如果要读取这个变量都是等待状态.

    MESI 嗅探机制, 保证多个cpu中同一个变量的值一致, 当一个cpu修改, 其它cpu会感知,把自己的变成失效, 重新从总线获取最新值

13. 并发编程三大特性: 可见性, 原子性, 有序性
    volatile 保证了可见性, 有序性, 但是不保证原子性.
    synchronized 三个都保证